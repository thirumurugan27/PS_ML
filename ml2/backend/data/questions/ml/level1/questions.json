[

  {
    "id": "house_prices_full_task_v1",
    "title": "Linear Regression: House Price Prediction",
    "description": "### **Overall Goal: Predicting House Prices**\n\nThe objective of this project is to build a linear regression model to predict house prices based on various features. You will work with two datasets: a training set to build your model and a testing set to make predictions.\n\n**Dataset Paths:**\n*   **Training Data:** `/home/bit/Desktop/ps/ml2/backend/data/datasets/house-prices/train.csv`\n*   **Testing Data:** `/home/bit/Desktop/ps/ml2/backend/data/datasets/house-prices/test.csv`\n\nThe project is divided into three parts. You must complete each part sequentially to build the final solution.\n\n---\n\n### **Part 1: Data Inspection**\n\n**Task:** Your first step is to load the `train.csv` dataset and inspect it for missing values. You need to identify which columns have missing data and count how many missing values are in each of those columns.\n\n**Expected Output:**\nYour code for this part should print the counts of missing values. The validation check will specifically look for the output related to the `LotFrontage` column. Your output should contain a line similar to this:\n```\n[column_name 1] [missing_count_column_1]\n[column_name 2] [missing_count_column_2]\n[column_name n] [missing_count_column_n]\n\n```\n\n---\n\n### **Part 2: Model Training & Evaluation**\n\n**Task:** After handling any necessary data preprocessing (like dealing with missing values and encoding categorical features), you will train a linear regression model. Once the model is trained, you must evaluate its performance on the training data by calculating the Root Mean Squared Error (RMSE) and the R-squared (R²) value.\n\n**Expected Output:**\nYour script must print both the RMSE and the R-squared value. The output should be clearly labeled, for example:\n\n```text\nRoot Mean Squared Error: [your_rmse_value]\nR-squared: [your_r2_value]\n```\n\n---\n\n### **Part 3: Prediction**\n\n**Task:** Using your trained model, you will make price predictions on the `test.csv` dataset. Your final predictions must be saved to a new CSV file named `submission.csv`.\n\n**CSV Format:**\nThe `submission.csv` file must contain exactly two columns:\n1.  `Id`: The ID of the house from the test set.\n2.  `SalePrice`: Your model's predicted sale price.\n\nThe header should look like this:\n```csv\nId,SalePrice\n1461,120000.0\n1462,155000.5\n...\n```\n\nYour submission will be validated by comparing your `submission.csv` file against a solution file to ensure your predictions are accurate.",    "parts": [
      {
        "part_id": "data_inspection",
        "type": "text_similarity",
        "description": "Check if missing values are printed correctly",
        "expected_text": "LotFrontage 259",
        "similarity_threshold": 0.8,
        "train_file": "data/datasets/house-prices/train.csv"
      },
      {
        "part_id": "model_training",
        "type": "text_similarity",
        "description": "Check RMSE and R² output",
        "expected_text": "Root Mean Squared Error R-squared",
        "similarity_threshold": 0.8,
        "train_file": "data/datasets/house-prices/train.csv"
      },
      {
        "part_id": "prediction",
        "type": "csv_similarity",
        "description": "Compare predicted CSV with solution CSV",
        "student_file": "submission.csv",
        "placeholder_filename": "submission.csv",
        "solution_file": "/home/bit/Desktop/ps/ml2/backend/data/datasets/house-prices/solution_submission.csv",
        "test_file": "data/datasets/house-prices/test.csv",
        "key_columns": ["Id", "SalePrice"],
        "similarity_threshold": 0.8
      }
    ]
  }
]