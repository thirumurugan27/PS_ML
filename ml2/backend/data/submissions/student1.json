[
  {
    "subject": "ml",
    "level": "level1",
    "status": "failed",
    "timestamp": "2025-08-02T16:59:32.609Z"
  },
  {
    "subject": "ml",
    "level": "level1",
    "status": "failed",
    "timestamp": "2025-08-02T16:59:42.777Z"
  },
  {
    "subject": "ml",
    "level": "level1",
    "status": "failed",
    "timestamp": "2025-08-16T15:00:44.955368"
  },
  {
    "subject": "ml",
    "level": "level1",
    "status": "passed",
    "timestamp": "2025-08-16T15:02:21.768868"
  },
  {
    "subject": "ml",
    "level": "level1",
    "status": "failed",
    "timestamp": "2025-08-16T17:00:04.862482"
  },
  {
    "subject": "ml",
    "level": "level1",
    "status": "failed",
    "timestamp": "2025-08-16T18:19:17.593214",
    "answers": [
      {
        "questionId": "q1",
        "code": "",
        "passed": false
      },
      {
        "questionId": "q5",
        "code": "",
        "passed": false
      }
    ]
  },
  {
    "subject": "ml",
    "level": "level1",
    "status": "passed",
    "timestamp": "2025-08-16T18:20:53.501852",
    "answers": [
      {
        "questionId": "q10",
        "code": "import numpy as np\r\n\r\n# Create the array\r\narr = np.array([2, 4, 6, 8])\r\n\r\n# Print the size (number of elements)\r\nprint(arr.size)\r\n",
        "passed": true
      },
      {
        "questionId": "q1",
        "code": "import numpy as np\r\n\r\n# Create the array\r\narr = np.array([1, 2, 3])\r\n\r\n# Print the array\r\nprint(arr)\r\n",
        "passed": true
      }
    ]
  },
  {
    "subject": "ml",
    "level": "level1",
    "status": "failed",
    "timestamp": "2025-08-16T18:22:56.568885",
    "answers": [
      {
        "questionId": "q6",
        "code": "import numpy as np\r\n\r\n# Read space-separated numbers from input\r\nnums = list(map(int, input().split()))\r\n\r\n# Create NumPy array\r\narr = np.array(nums)\r\n\r\n# Multiply each number by 2\r\nresult = arr * 2\r\n\r\n# Print the result\r\nprint(result)\r\n",
        "passed": true
      },
      {
        "questionId": "q3",
        "code": "",
        "passed": false
      }
    ]
  },
  {
    "subject": "ml",
    "level": "level2",
    "status": "passed",
    "timestamp": "2025-08-16T18:28:06.899759",
    "answers": [
      {
        "questionId": "q2",
        "code": "# Read inputs\r\ns = input().strip()\r\nn = int(input())\r\n\r\n# Repeat the string n times\r\nprint(s * n)\r\n",
        "passed": true
      },
      {
        "questionId": "q1",
        "code": "# Read two numbers (one per line)\r\na = float(input())\r\nb = float(input())\r\n\r\n# Add them together\r\nprint(a + b)\r\n",
        "passed": true
      }
    ]
  },
  {
    "subject": "ml",
    "level": "level1",
    "status": "failed",
    "timestamp": "2025-08-16T18:29:30.449709",
    "answers": [
      {
        "questionId": "q9",
        "code": "",
        "passed": false
      },
      {
        "questionId": "q2",
        "code": "import numpy as np\r\n\r\n# Read input\r\nn = int(input())\r\n\r\n# Create an array of n ones\r\narr = np.ones(n)\r\n\r\n# Print the array\r\nprint(arr)\r\n",
        "passed": true
      }
    ]
  },
  {
    "subject": "ml",
    "level": "level1",
    "status": "failed",
    "timestamp": "2025-08-16T18:33:17.895431",
    "answers": [
      {
        "questionId": "q3",
        "code": "",
        "passed": false
      },
      {
        "questionId": "q2",
        "code": "import numpy as np\r\n\r\n# Read input\r\nn = int(input())\r\n\r\n# Create an array of n ones\r\narr = np.ones(n)\r\n\r\n# Print the array\r\nprint(arr)\r\n",
        "passed": true
      }
    ]
  },
  {
    "subject": "ds",
    "level": "level1",
    "status": "failed",
    "timestamp": "2025-08-19T14:01:34.375539",
    "answers": [
      {
        "questionId": "house_prices_full_task_v1",
        "code": "",
        "passed": false,
        "llm_aligned": false,
        "llm_reason": "The provided student's code is missing.  A JSON response cannot be generated without the student's code to analyze.  To get a proper evaluation, please provide the student's code and the problem description.",
        "fully_passed": false
      },
      {
        "questionId": "house_prices_full_task_v2",
        "code": "",
        "passed": false,
        "llm_aligned": false,
        "llm_reason": "The provided student's code is missing.  Without the student's code, it's impossible to determine if it's a genuine attempt or hardcoded.  A valid response requires the student's code to be included in the prompt.",
        "fully_passed": false
      }
    ]
  },
  {
    "subject": "ml",
    "level": "level1",
    "status": "failed",
    "timestamp": "2025-08-19T15:10:37.506414",
    "answers": [
      {
        "questionId": "q6",
        "code": "",
        "passed": false,
        "llm_aligned": false,
        "llm_reason": "No code was provided.  Therefore, it cannot be a valid attempt at solving the problem.  A genuine attempt would involve reading input, creating an array (list or numpy array), performing the multiplication, and printing the result.",
        "fully_passed": false
      },
      {
        "questionId": "q1",
        "code": "",
        "passed": false,
        "llm_aligned": false,
        "llm_reason": "The student submitted no code.  A valid solution would import the NumPy library and use its array creation functionality to generate and print the array [1, 2, 3].",
        "fully_passed": false
      }
    ]
  },
  {
    "subject": "ml",
    "level": "level1",
    "status": "failed",
    "timestamp": "2025-08-22T12:13:33.687170",
    "answers": [
      {
        "questionId": "q8",
        "code": "",
        "passed": false,
        "fully_passed": false
      },
      {
        "questionId": "q3",
        "code": "",
        "passed": false,
        "fully_passed": false
      }
    ]
  },
  {
    "subject": "ml",
    "level": "level2",
    "status": "passed",
    "timestamp": "2025-08-22T15:31:21.602665",
    "answers": [
      {
        "questionId": "house_prices_full_task_v1_data_inspection",
        "code": "\n# Part 1: Data Inspection\nimport pandas as pd\n\n# Define the path to the training dataset\nTRAIN_CSV_PATH = '/home/bit/Desktop/ps/ml2/backend/data/datasets/house-prices/train.csv'\n\n\ntry:\n    # Load the training dataset\n    train_df = pd.read_csv(TRAIN_CSV_PATH)\n\n    # Calculate the number of missing values for each column\n    missing_values = train_df.isnull().sum()\n\n    # Filter the series to only include columns that have missing values\n    columns_with_missing_values = missing_values[missing_values > 0]\n\n    if columns_with_missing_values.empty:\n        print(\"No missing values found in the training data.\")\n    else:\n        # Iterate through the filtered series and print in the specified format\n        for column, count in columns_with_missing_values.items():\n            print(f\"{column} {count}\")\n\nexcept FileNotFoundError:\n    print(f\"Error: The file was not found at {TRAIN_CSV_PATH}\")\nexcept Exception as e:\n    print(f\"An error occurred: {e}\")\n\n",
        "passed": true,
        "fully_passed": true
      },
      {
        "questionId": "house_prices_full_task_v1_model_training",
        "code": "\n\n# Part 2: Model Training & Evaluation\nimport pandas as pd\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error, r2_score\n\n# Define the path to the training dataset\nTRAIN_CSV_PATH = '/home/bit/Desktop/ps/ml2/backend/data/datasets/house-prices/train.csv'\n\n\ntry:\n    # Load the training dataset\n    train_df = pd.read_csv(TRAIN_CSV_PATH)\n\n    # --- Data Preprocessing ---\n    # Separate features (X) and target (y). Drop 'Id' as it's an identifier.\n    X = train_df.drop(['SalePrice', 'Id'], axis=1)\n    y = train_df['SalePrice']\n\n    # Identify numerical and categorical columns\n    numerical_cols = X.select_dtypes(include=np.number).columns\n    categorical_cols = X.select_dtypes(include='object').columns\n\n    # Handle Missing Values: Fill numerical with median, categorical with mode\n    for col in numerical_cols:\n        X[col] = X[col].fillna(X[col].median())\n    for col in categorical_cols:\n        X[col] = X[col].fillna(X[col].mode()[0])\n\n    # Convert Categorical Features to Numbers using One-Hot Encoding\n    X_processed = pd.get_dummies(X, columns=categorical_cols, drop_first=True)\n\n    # --- Model Training ---\n    # Initialize the Linear Regression model\n    model = LinearRegression()\n\n    # Train the model on the preprocessed data\n    model.fit(X_processed, y)\n\n    # --- Model Evaluation ---\n    # Make predictions on the same training data to evaluate its fit\n    y_train_pred = model.predict(X_processed)\n\n    # Calculate RMSE and R-squared\n    rmse = np.sqrt(mean_squared_error(y, y_train_pred))\n    r2 = r2_score(y, y_train_pred)\n\n    # Print the evaluation metrics in the specified format\n    print(f\"Root Mean Squared Error: {rmse}\")\n    print(f\"R-squared: {r2}\")\n\nexcept FileNotFoundError:\n    print(f\"Error: The file was not found at {TRAIN_CSV_PATH}\")\nexcept Exception as e:\n    print(f\"An error occurred: {e}\")\n\n\n",
        "passed": true,
        "fully_passed": true
      },
      {
        "questionId": "house_prices_full_task_v1_prediction",
        "code": "\n\n# Part 3: Prediction\nimport pandas as pd\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\n\n# Define file paths\nTRAIN_CSV_PATH = '/home/bit/Desktop/ps/ml2/backend/data/datasets/house-prices/train.csv'\nTEST_CSV_PATH = '/home/bit/Desktop/ps/ml2/backend/data/datasets/house-prices/test.csv'\nSUBMISSION_CSV_PATH = 'submission.csv'\n\n\ntry:\n    # Load training and testing data\n    train_df = pd.read_csv(TRAIN_CSV_PATH)\n    test_df = pd.read_csv(TEST_CSV_PATH)\n\n    # Store test IDs for the final submission file\n    test_ids = test_df['Id']\n\n    # --- Data Preprocessing ---\n    # Separate features and target from training data\n    X_train = train_df.drop(['SalePrice', 'Id'], axis=1)\n    y_train = train_df['SalePrice']\n    X_test = test_df.drop('Id', axis=1) # Features from test data\n\n    # Combine for consistent processing\n    combined_df = pd.concat([X_train, X_test], axis=0)\n\n    # Identify column types\n    numerical_cols = combined_df.select_dtypes(include=np.number).columns\n    categorical_cols = combined_df.select_dtypes(include='object').columns\n\n    # Handle Missing Values\n    for col in numerical_cols:\n        combined_df[col] = combined_df[col].fillna(combined_df[col].median())\n    for col in categorical_cols:\n        combined_df[col] = combined_df[col].fillna(combined_df[col].mode()[0])\n\n    # One-Hot Encode Categorical Features\n    combined_processed = pd.get_dummies(combined_df, columns=categorical_cols, drop_first=True)\n\n    # Separate back into training and testing sets\n    X_train_processed = combined_processed.iloc[:len(train_df)]\n    X_test_processed = combined_processed.iloc[len(train_df):]\n\n    # --- Model Training ---\n    model = LinearRegression()\n    model.fit(X_train_processed, y_train)\n\n    # --- Prediction on Test Data ---\n    test_predictions = model.predict(X_test_processed)\n\n    # --- Create Submission File ---\n    submission_df = pd.DataFrame({\n        'Id': test_ids,\n        'SalePrice': test_predictions\n    })\n\n    # Save the predictions to submission.csv\n    submission_df.to_csv(SUBMISSION_CSV_PATH, index=False)\n\n\n    print(submission_df.head())\n\nexcept FileNotFoundError:\n    print(f\"Error: A dataset file was not found. Check the paths.\")\nexcept Exception as e:\n    print(f\"An error occurred: {e}\")",
        "passed": true,
        "fully_passed": true
      }
    ]
  },
  {
    "subject": "ds",
    "level": "level1",
    "status": "failed",
    "timestamp": "2025-08-23T12:08:10.686628",
    "answers": [
      {
        "questionId": "q1",
        "code": "",
        "passed": false,
        "fully_passed": false
      },
      {
        "questionId": "q2",
        "code": "",
        "passed": false,
        "fully_passed": false
      },
      {
        "questionId": "q3",
        "code": "import numpy as np\nb=input()\nb=b.split()\nc=list(map(int,b))\nprint(np.array(c)+2)",
        "passed": true,
        "fully_passed": true
      },
      {
        "questionId": "q4",
        "code": "",
        "passed": false,
        "fully_passed": false
      },
      {
        "questionId": "q5",
        "code": "",
        "passed": false,
        "fully_passed": false
      },
      {
        "questionId": "q6",
        "code": "",
        "passed": false,
        "fully_passed": false
      },
      {
        "questionId": "q7",
        "code": "",
        "passed": false,
        "fully_passed": false
      },
      {
        "questionId": "q8",
        "code": "",
        "passed": false,
        "fully_passed": false
      },
      {
        "questionId": "q9",
        "code": "",
        "passed": false,
        "fully_passed": false
      },
      {
        "questionId": "q10",
        "code": "",
        "passed": false,
        "fully_passed": false
      }
    ]
  },
  {
    "subject": "ml",
    "level": "level1",
    "status": "failed",
    "timestamp": "2025-08-26T18:05:16.770845",
    "answers": [
      {
        "questionId": "house_prices_full_task_v1_data_inspection",
        "code": "",
        "passed": false,
        "fully_passed": false
      },
      {
        "questionId": "house_prices_full_task_v1_model_training",
        "code": "",
        "passed": false,
        "fully_passed": false
      },
      {
        "questionId": "house_prices_full_task_v1_prediction",
        "code": "",
        "passed": false,
        "fully_passed": false
      }
    ]
  },
  {
    "subject": "ds",
    "level": "level1",
    "status": "failed",
    "timestamp": "2025-08-27T15:39:38.120630",
    "answers": [
      {
        "questionId": "q1",
        "partId": null,
        "code": "print(\"[1 2 3]\")",
        "passed": true,
        "fully_passed": true
      },
      {
        "questionId": "q2",
        "partId": null,
        "code": "",
        "passed": false,
        "fully_passed": false
      },
      {
        "questionId": "q3",
        "partId": null,
        "code": "",
        "passed": false,
        "fully_passed": false
      },
      {
        "questionId": "q4",
        "partId": null,
        "code": "",
        "passed": false,
        "fully_passed": false
      },
      {
        "questionId": "q5",
        "partId": null,
        "code": "",
        "passed": false,
        "fully_passed": false
      },
      {
        "questionId": "q6",
        "partId": null,
        "code": "",
        "passed": false,
        "fully_passed": false
      },
      {
        "questionId": "q7",
        "partId": null,
        "code": "",
        "passed": false,
        "fully_passed": false
      },
      {
        "questionId": "q8",
        "partId": null,
        "code": "",
        "passed": false,
        "fully_passed": false
      },
      {
        "questionId": "q9",
        "partId": null,
        "code": "",
        "passed": false,
        "fully_passed": false
      },
      {
        "questionId": "q10",
        "partId": null,
        "code": "",
        "passed": false,
        "fully_passed": false
      }
    ]
  },
  {
    "subject": "ds",
    "level": "level1",
    "status": "failed",
    "timestamp": "2025-08-27T15:40:52.711619",
    "answers": [
      {
        "questionId": "q1",
        "partId": null,
        "code": "",
        "passed": false,
        "fully_passed": false
      },
      {
        "questionId": "q2",
        "partId": null,
        "code": "",
        "passed": false,
        "fully_passed": false
      },
      {
        "questionId": "q3",
        "partId": null,
        "code": "",
        "passed": false,
        "fully_passed": false
      },
      {
        "questionId": "q4",
        "partId": null,
        "code": "",
        "passed": false,
        "fully_passed": false
      },
      {
        "questionId": "q5",
        "partId": null,
        "code": "",
        "passed": false,
        "fully_passed": false
      },
      {
        "questionId": "q6",
        "partId": null,
        "code": "",
        "passed": false,
        "fully_passed": false
      },
      {
        "questionId": "q7",
        "partId": null,
        "code": "",
        "passed": false,
        "fully_passed": false
      },
      {
        "questionId": "q8",
        "partId": null,
        "code": "",
        "passed": false,
        "fully_passed": false
      },
      {
        "questionId": "q9",
        "partId": null,
        "code": "",
        "passed": false,
        "fully_passed": false
      },
      {
        "questionId": "q10",
        "partId": null,
        "code": "",
        "passed": false,
        "fully_passed": false
      }
    ]
  },
  {
    "subject": "ds",
    "level": "level1",
    "status": "failed",
    "timestamp": "2025-08-27T15:51:47.316033",
    "answers": [
      {
        "questionId": "q1",
        "partId": null,
        "code": "",
        "passed": false,
        "fully_passed": false
      },
      {
        "questionId": "q2",
        "partId": null,
        "code": "",
        "passed": false,
        "fully_passed": false
      },
      {
        "questionId": "q3",
        "partId": null,
        "code": "",
        "passed": false,
        "fully_passed": false
      },
      {
        "questionId": "q4",
        "partId": null,
        "code": "",
        "passed": false,
        "fully_passed": false
      },
      {
        "questionId": "q5",
        "partId": null,
        "code": "",
        "passed": false,
        "fully_passed": false
      },
      {
        "questionId": "q6",
        "partId": null,
        "code": "",
        "passed": false,
        "fully_passed": false
      },
      {
        "questionId": "q7",
        "partId": null,
        "code": "",
        "passed": false,
        "fully_passed": false
      },
      {
        "questionId": "q8",
        "partId": null,
        "code": "",
        "passed": false,
        "fully_passed": false
      },
      {
        "questionId": "q9",
        "partId": null,
        "code": "",
        "passed": false,
        "fully_passed": false
      },
      {
        "questionId": "q10",
        "partId": null,
        "code": "",
        "passed": false,
        "fully_passed": false
      }
    ]
  }
]