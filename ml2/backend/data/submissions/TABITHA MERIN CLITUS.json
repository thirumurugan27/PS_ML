[
  {
    "subject": "ml",
    "level": "level2",
    "status": "passed",
    "timestamp": "2025-08-21T11:15:02.077444",
    "answers": [
      {
        "questionId": "house_prices_full_task_v1_data_inspection",
        "code": "import pandas as pd\r\ntrain_data = pd.read_csv(\"/home/bit/Desktop/ps/ml2/backend/data/datasets/house-prices/train.csv\")\r\nmissing_values = train_data.isnull().sum()\r\nmissing_values = missing_values[missing_values > 0]\r\nfor col, count in missing_values.items():\r\n    print(f\"{col} {count}\")\r\n",
        "passed": true,
        "fully_passed": true
      },
      {
        "questionId": "house_prices_full_task_v1_model_training",
        "code": "import pandas as pd\r\nimport numpy as np\r\nfrom sklearn.linear_model import LinearRegression\r\nfrom sklearn.metrics import mean_squared_error, r2_score\r\ntrain_data = pd.read_csv(\"/home/bit/Desktop/ps/ml2/backend/data/datasets/house-prices/train.csv\")\r\ny = train_data[\"SalePrice\"]\r\nX = train_data.drop(columns=[\"SalePrice\"])\r\nnum_cols = X.select_dtypes(include=[np.number]).columns\r\ncat_cols = X.select_dtypes(exclude=[np.number]).columns\r\nX[num_cols] = X[num_cols].fillna(X[num_cols].median())\r\nif len(cat_cols) > 0:\r\n    modes = X[cat_cols].mode().iloc[0]  \r\n    X[cat_cols] = X[cat_cols].fillna(modes)\r\nX = pd.get_dummies(X, drop_first=True)\r\nmodel = LinearRegression()\r\nmodel.fit(X, y)\r\ny_pred = model.predict(X)\r\nrmse = np.sqrt(mean_squared_error(y, y_pred))\r\nr2 = r2_score(y, y_pred)\r\nprint(f\"Root Mean Squared Error: {rmse:.2f}\")\r\nprint(f\"R-squared: {r2:.2f}\")\r\n\r\n\r\n\r\n",
        "passed": true,
        "fully_passed": true
      },
      {
        "questionId": "house_prices_full_task_v1_prediction",
        "code": "import pandas as pd\r\nfrom sklearn.linear_model import LinearRegression\r\nfrom sklearn.compose import ColumnTransformer\r\nfrom sklearn.pipeline import Pipeline\r\nfrom sklearn.preprocessing import OneHotEncoder\r\nfrom sklearn.impute import SimpleImputer\r\ntrain_path = \"/home/bit/Desktop/ps/ml2/backend/data/datasets/house-prices/train.csv\"\r\ntest_path  = \"/home/bit/Desktop/ps/ml2/backend/data/datasets/house-prices/test.csv\"\r\ntrain = pd.read_csv(train_path)\r\ntest  = pd.read_csv(test_path)\r\ny = train[\"SalePrice\"].copy()\r\nX = train.drop(columns=[\"SalePrice\"]).copy()\r\n\r\ntest_ids = test[\"Id\"].copy()\r\nX_test = test.copy()\r\nif \"Id\" in X.columns:\r\n    X = X.drop(columns=[\"Id\"])\r\nif \"Id\" in X_test.columns:\r\n    X_test = X_test.drop(columns=[\"Id\"])\r\nnum_cols = X.select_dtypes(include=[\"number\"]).columns.tolist()\r\ncat_cols = X.select_dtypes(exclude=[\"number\"]).columns.tolist()\r\nnumeric_tf = Pipeline(steps=[\r\n    (\"imputer\", SimpleImputer(strategy=\"median\"))\r\n])\r\n\r\ncategorical_tf = Pipeline(steps=[\r\n    (\"imputer\", SimpleImputer(strategy=\"most_frequent\")),\r\n    (\"onehot\", OneHotEncoder(handle_unknown=\"ignore\"))\r\n])\r\n\r\npreprocess = ColumnTransformer(\r\n    transformers=[\r\n        (\"num\", numeric_tf, num_cols),\r\n        (\"cat\", categorical_tf, cat_cols)\r\n    ],\r\n    remainder=\"drop\"  \r\n)\r\n\r\nmodel = Pipeline(steps=[\r\n    (\"prep\", preprocess),\r\n    (\"linreg\", LinearRegression())\r\n])\r\nmodel.fit(X, y)\r\npreds = model.predict(X_test)\r\nsubmission = pd.DataFrame({\r\n    \"Id\": test_ids,\r\n    \"SalePrice\": preds\r\n})\r\nsubmission = submission[[\"Id\", \"SalePrice\"]]\r\nsubmission.to_csv(\"submission.csv\", index=False)\r\n\r\nprint(\"\u2705 submission.csv created with columns: Id,SalePrice\")\r\n\r\n\r\n\r\n",
        "passed": true,
        "fully_passed": true
      }
    ]
  }
]