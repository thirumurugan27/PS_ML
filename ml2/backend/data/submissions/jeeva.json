[
  {
    "subject": "ml",
    "level": "level1",
    "status": "passed",
    "timestamp": "2025-08-21T09:09:57.837787",
    "answers": [
      {
        "questionId": "q8",
        "code": "a = input()\r\nb = a.split()\r\nb = [int(x) for x in b]   # convert each string to int\r\nprint(sum(b))\r\n",
        "passed": true,
        "fully_passed": true
      },
      {
        "questionId": "q4",
        "code": "a = input()\r\nb = a.split()\r\nprint(len(b))",
        "passed": true,
        "fully_passed": true
      }
    ]
  },
  {
    "subject": "ml",
    "level": "level2",
    "status": "passed",
    "timestamp": "2025-08-21T09:17:41.324934",
    "answers": [
      {
        "questionId": "house_prices_full_task_v1_data_inspection",
        "code": "import pandas as pd\r\npath = \"/home/bit/Desktop/ps/ml2/backend/data/datasets/house-prices/train.csv\"\r\ndf = pd.read_csv(path)\r\nna_counts = df.isna().sum()\r\nna_counts = na_counts[na_counts > 0]\r\nfor col, cnt in na_counts.items():\r\n    print(f\"{col} {cnt}\")\r\n",
        "passed": true,
        "fully_passed": true
      },
      {
        "questionId": "house_prices_full_task_v1_model_training",
        "code": "import pandas as pd\r\nimport numpy as np\r\nfrom sklearn.linear_model import LinearRegression\r\nfrom sklearn.metrics import mean_squared_error, r2_score\r\n\r\n# Load training data\r\npath = \"/home/bit/Desktop/ps/ml2/backend/data/datasets/house-prices/train.csv\"\r\ndf = pd.read_csv(path)\r\n\r\n# Separate features (X) and target (y)\r\nX = df.drop(\"SalePrice\", axis=1)\r\ny = df[\"SalePrice\"]\r\n\r\n# Handle missing values\r\nfor col in X.columns:\r\n    if X[col].dtype == \"object\":  # categorical\r\n        X[col] = X[col].fillna(X[col].mode()[0])\r\n    else:  # numeric\r\n        X[col] = X[col].fillna(X[col].median())\r\n\r\n# One-hot encode categorical variables\r\nX = pd.get_dummies(X, drop_first=True)\r\n\r\n# Train Linear Regression\r\nmodel = LinearRegression()\r\nmodel.fit(X, y)\r\n\r\n# Predictions on training set\r\ny_pred = model.predict(X)\r\n\r\n# Evaluation metrics\r\nrmse = np.sqrt(mean_squared_error(y, y_pred))\r\nr2 = r2_score(y, y_pred)\r\n\r\n# Print in required format\r\nprint(f\"Root Mean Squared Error: {rmse}\")\r\nprint(f\"R-squared: {r2}\")\r\n",
        "passed": true,
        "fully_passed": true
      },
      {
        "questionId": "house_prices_full_task_v1_prediction",
        "code": "# Part 3: Prediction\r\nimport pandas as pd\r\nimport numpy as np\r\nfrom sklearn.linear_model import LinearRegression\r\n\r\n# Define file paths\r\nTRAIN_CSV_PATH = '/home/bit/Desktop/ps/ml2/backend/data/datasets/house-prices/train.csv'\r\nTEST_CSV_PATH = '/home/bit/Desktop/ps/ml2/backend/data/datasets/house-prices/test.csv'\r\nSUBMISSION_CSV_PATH = 'submission.csv'\r\n\r\n\r\ntry:\r\n    # Load training and testing data\r\n    train_df = pd.read_csv(TRAIN_CSV_PATH)\r\n    test_df = pd.read_csv(TEST_CSV_PATH)\r\n\r\n    # Store test IDs for the final submission file\r\n    test_ids = test_df['Id']\r\n\r\n    # --- Data Preprocessing ---\r\n    # Separate features and target from training data\r\n    X_train = train_df.drop(['SalePrice', 'Id'], axis=1)\r\n    y_train = train_df['SalePrice']\r\n    X_test = test_df.drop('Id', axis=1) # Features from test data\r\n\r\n    # Combine for consistent processing\r\n    combined_df = pd.concat([X_train, X_test], axis=0)\r\n\r\n    # Identify column types\r\n    numerical_cols = combined_df.select_dtypes(include=np.number).columns\r\n    categorical_cols = combined_df.select_dtypes(include='object').columns\r\n\r\n    # Handle Missing Values\r\n    for col in numerical_cols:\r\n        combined_df[col] = combined_df[col].fillna(combined_df[col].median())\r\n    for col in categorical_cols:\r\n        combined_df[col] = combined_df[col].fillna(combined_df[col].mode()[0])\r\n\r\n    # One-Hot Encode Categorical Features\r\n    combined_processed = pd.get_dummies(combined_df, columns=categorical_cols, drop_first=True)\r\n\r\n    # Separate back into training and testing sets\r\n    X_train_processed = combined_processed.iloc[:len(train_df)]\r\n    X_test_processed = combined_processed.iloc[len(train_df):]\r\n\r\n    # --- Model Training ---\r\n    model = LinearRegression()\r\n    model.fit(X_train_processed, y_train)\r\n\r\n    # --- Prediction on Test Data ---\r\n    test_predictions = model.predict(X_test_processed)\r\n\r\n    # --- Create Submission File ---\r\n    submission_df = pd.DataFrame({\r\n        'Id': test_ids,\r\n        'SalePrice': test_predictions\r\n    })\r\n\r\n    # Save the predictions to submission.csv\r\n    submission_df.to_csv(SUBMISSION_CSV_PATH, index=False)\r\n\r\n\r\n    print(submission_df.head())\r\n\r\nexcept FileNotFoundError:\r\n    print(f\"Error: A dataset file was not found. Check the paths.\")\r\nexcept Exception as e:\r\n    print(f\"An error\u00a0occurred:\u00a0{e}\")",
        "passed": true,
        "fully_passed": true
      }
    ]
  },
  {
    "subject": "ml",
    "level": "level1",
    "status": "failed",
    "timestamp": "2025-09-02T14:27:26.132856",
    "answers": [
      {
        "questionId": "house_prices_full_task_v1_data_inspection",
        "code": "",
        "passed": false,
        "fully_passed": false
      },
      {
        "questionId": "house_prices_full_task_v1_model_training",
        "code": "",
        "passed": false,
        "fully_passed": false
      },
      {
        "questionId": "house_prices_full_task_v1_prediction",
        "code": "",
        "passed": false,
        "fully_passed": false
      }
    ]
  },
  {
    "subject": "ds",
    "level": "level1",
    "status": "failed",
    "timestamp": "2025-09-04T10:45:25.281723",
    "answers": [
      {
        "questionId": "q1",
        "partId": null,
        "code": "",
        "passed": false,
        "fully_passed": false
      },
      {
        "questionId": "q2",
        "partId": null,
        "code": "",
        "passed": false,
        "fully_passed": false
      },
      {
        "questionId": "q3",
        "partId": null,
        "code": "",
        "passed": false,
        "fully_passed": false
      },
      {
        "questionId": "q4",
        "partId": null,
        "code": "",
        "passed": false,
        "fully_passed": false
      },
      {
        "questionId": "q5",
        "partId": null,
        "code": "",
        "passed": false,
        "fully_passed": false
      },
      {
        "questionId": "q6",
        "partId": null,
        "code": "",
        "passed": false,
        "fully_passed": false
      },
      {
        "questionId": "q7",
        "partId": null,
        "code": "",
        "passed": false,
        "fully_passed": false
      },
      {
        "questionId": "q8",
        "partId": null,
        "code": "",
        "passed": false,
        "fully_passed": false
      },
      {
        "questionId": "q9",
        "partId": null,
        "code": "",
        "passed": false,
        "fully_passed": false
      },
      {
        "questionId": "q10",
        "partId": null,
        "code": "",
        "passed": false,
        "fully_passed": false
      }
    ]
  }
]