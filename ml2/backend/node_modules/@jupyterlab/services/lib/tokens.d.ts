import { ConfigSection, Contents, Event, Kernel, KernelSpec, NbConvert, ServerConnection, Session, Setting, Terminal, User, Workspace } from '.';
import { ServiceManager } from './manager';
import { type IPlugin, Token } from '@lumino/coreutils';
/**
 * The type for a service manager plugin.
 *
 * @typeparam T - The type that the plugin `provides` upon being activated.
 *
 * #### Notes
 * This type of plugin is different than a JupyterFrontEndPlugin,
 * as the app will still be `null` when its `activate` method is called.
 */
export type ServiceManagerPlugin<T> = IPlugin<null, T>;
/**
 * Application connection status interface
 */
export interface IConnectionStatus {
    /**
     * Whether the application is connected to the server or not.
     *
     * #### Notes
     *
     * Every periodic network polling should be paused while this is set
     * to `false`. Extensions should use this value to decide whether to proceed
     * with the polling.
     * The extensions may also set this value to `false` if there is no need to
     * fetch anything from the server backend basing on some conditions
     * (e.g. when an error message dialog is displayed).
     * At the same time, the extensions are responsible for setting this value
     * back to `true`.
     */
    isConnected: boolean;
}
/**
 * Token providing the application connection status.
 */
export declare const IConnectionStatus: Token<IConnectionStatus>;
/**
 * Token providing the config section manager.
 */
export declare const IConfigSectionManager: Token<ConfigSection.IManager>;
/**
 * The contents manager token.
 */
export declare const IContentsManager: Token<Contents.IManager>;
/**
 * The default drive token.
 */
export declare const IDefaultDrive: Token<Contents.IDrive>;
/**
 * The event manager token.
 */
export declare const IEventManager: Token<Event.IManager>;
/**
 * The kernel manager token.
 */
export declare const IKernelManager: Token<Kernel.IManager>;
/**
 * The kernel spec manager token.
 */
export declare const IKernelSpecManager: Token<KernelSpec.IManager>;
/**
 * The nbconvert manager token.
 */
export declare const INbConvertManager: Token<NbConvert.IManager>;
/**
 * The server settings token.
 */
export declare const IServerSettings: Token<ServerConnection.ISettings>;
/**
 * The session manager token.
 */
export declare const ISessionManager: Token<Session.IManager>;
/**
 * The setting manager token.
 */
export declare const ISettingManager: Token<Setting.IManager>;
/**
 * The default service manager token.
 */
export declare const IServiceManager: Token<ServiceManager.IManager>;
/**
 * The terminal manager token.
 */
export declare const ITerminalManager: Token<Terminal.IManager>;
/**
 * The user manager token.
 */
export declare const IUserManager: Token<User.IManager>;
/**
 * The workspace manager token.
 */
export declare const IWorkspaceManager: Token<Workspace.IManager>;
