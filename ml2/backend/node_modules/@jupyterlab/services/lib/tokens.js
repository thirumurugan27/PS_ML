"use strict";
// Copyright (c) Jupyter Development Team.
// Distributed under the terms of the Modified BSD License.
Object.defineProperty(exports, "__esModule", { value: true });
exports.IWorkspaceManager = exports.IUserManager = exports.ITerminalManager = exports.IServiceManager = exports.ISettingManager = exports.ISessionManager = exports.IServerSettings = exports.INbConvertManager = exports.IKernelSpecManager = exports.IKernelManager = exports.IEventManager = exports.IDefaultDrive = exports.IContentsManager = exports.IConfigSectionManager = exports.IConnectionStatus = void 0;
const coreutils_1 = require("@lumino/coreutils");
/**
 * Token providing the application connection status.
 */
exports.IConnectionStatus = new coreutils_1.Token('@jupyterlab/application:IConnectionStatus', 'A service providing the application connection status.');
/**
 * Token providing the config section manager.
 */
exports.IConfigSectionManager = new coreutils_1.Token('@jupyterlab/services:IConfigSectionManager', 'A service providing the config section manager.');
/**
 * The contents manager token.
 */
exports.IContentsManager = new coreutils_1.Token('@jupyterlab/services:IContentsManager', 'The contents manager token.');
/**
 * The default drive token.
 */
exports.IDefaultDrive = new coreutils_1.Token('@jupyterlab/services:IDefaultDrive', 'The default drive for the contents manager.');
/**
 * The event manager token.
 */
exports.IEventManager = new coreutils_1.Token('@jupyterlab/services:IEventManager', 'The event manager token.');
/**
 * The kernel manager token.
 */
exports.IKernelManager = new coreutils_1.Token('@jupyterlab/services:IKernelManager', 'The kernel manager token.');
/**
 * The kernel spec manager token.
 */
exports.IKernelSpecManager = new coreutils_1.Token('@jupyterlab/services:IKernelSpecManager', 'The kernel spec manager token.');
/**
 * The nbconvert manager token.
 */
exports.INbConvertManager = new coreutils_1.Token('@jupyterlab/services:INbConvertManager', 'The nbconvert manager token.');
/**
 * The server settings token.
 */
exports.IServerSettings = new coreutils_1.Token('@jupyterlab/services:IServerSettings', 'The server settings for the application.');
/**
 * The session manager token.
 */
exports.ISessionManager = new coreutils_1.Token('@jupyterlab/services:ISessionManager', 'The session manager token.');
/**
 * The setting manager token.
 */
exports.ISettingManager = new coreutils_1.Token('@jupyterlab/services:ISettingManager', 'The setting manager token.');
/**
 * The default service manager token.
 */
exports.IServiceManager = new coreutils_1.Token('@jupyterlab/services:IServiceManager', 'The service manager for the application.');
/**
 * The terminal manager token.
 */
exports.ITerminalManager = new coreutils_1.Token('@jupyterlab/services:ITerminalManager', 'The terminal manager token.');
/**
 * The user manager token.
 */
exports.IUserManager = new coreutils_1.Token('@jupyterlab/services:IUserManager', 'The user manager token.');
/**
 * The workspace manager token.
 */
exports.IWorkspaceManager = new coreutils_1.Token('@jupyterlab/services:IWorkspaceManager', 'The workspace manager token.');
//# sourceMappingURL=tokens.js.map